name: Manage Terraform Backend
run-name: Manage TF Backend[provider=${{ github.event.inputs.cloud_provider }}, region=${{ github.event.inputs.region }}, act:${{ github.event.inputs.action }}]
on: 
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: 'Cloud Provider selected (AWS or Azure or GCP)'
        required: true
        type: choice
        options:
          - AWS
          - AZ
          - GCP
      region:
        description: 'Select the region'
        required: true
        type: choice
        options:
          - us-east-1
          - us-west-1
          - az-east
          - az-west
      action:
        description: 'Action Needed'
        required: true
        type: choice
        options:
          - create
          - destroy
      bucket_name:
        description: 'Bucket Name'
        required: true
        type: string
        default: 'ms01-tfstate-'
jobs:
  setup-s3-backend:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'create' && github.event.inputs.cloud_provider == 'AWS' }}
    steps:
    
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: AWS - Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.M_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.M_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{github.event.inputs.region}}  # Change as needed

    - name: AWS - Set Bucket Name
      run: |
        BUCKET_NAME=${{ github.event.inputs.bucket_name }}
        echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
        echo "Generated Bucket Name: $BUCKET_NAME"

    - name: AWS - Create S3 Bucket
      run: |
        aws s3 mb s3://$BUCKET_NAME
        aws s3api put-bucket-versioning --bucket $BUCKET_NAME --versioning-configuration Status=Enabled
    
    - name: AWS - Create DynamoDB Table for State Locking
      run: |
        aws dynamodb create-table \
        --table-name terraform-lock \
        --attribute-definitions AttributeName=LockID,AttributeType=S \
        --key-schema AttributeName=LockID,KeyType=HASH \
        --billing-mode PAY_PER_REQUEST || true

    - name: AWS - Upload a Test File (Optional)
      run: |
        echo "Hello, S3!" > test.txt
        aws s3 cp test.txt s3://$BUCKET_NAME/
        echo "Terraform S3 backend created: $BUCKET_NAME"
    
  destroy-s3-backend:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' && github.event.inputs.cloud_provider == 'AWS' }}
    steps:

    - name: AWS - Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.M_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.M_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{github.event.inputs.region}}

    - name: AWS - Check if S3 Bucket Exists
      id: check_bucket
      run: |
        BUCKET_NAME=${{ github.event.inputs.bucket_name }}
        echo "Bucket name is: $BUCKET_NAME"  # Debugging step
        if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
          echo "BUCKET_EXISTS=true" >> $GITHUB_ENV
        else
          echo "BUCKET_EXISTS=false" >> $GITHUB_ENV
        fi
        echo "Bucket exists: $BUCKET_EXISTS"
    
    - name: AWS - Delete all object versions and delete markers in the S3 bucket
      if: env.BUCKET_EXISTS == 'true'
      run: |
        # List all versions in the bucket and delete them
        aws s3api list-object-versions --bucket $BUCKET_NAME --query 'Versions[].{Key:Key,VersionId:VersionId}' --output text |
        while read -r key version_id; do
          echo "Deleting object version: $key with version id: $version_id"
          aws s3api delete-object --bucket $BUCKET_NAME --key "$key" --version-id "$version_id"
        done
        # List and delete delete markers (if any)
        aws s3api list-object-versions --bucket $BUCKET_NAME --query 'DeleteMarkers[].{Key:Key,VersionId:VersionId}' --output text |
        while read -r key version_id; do
          echo "Deleting delete marker: $key with version id: $version_id"
          aws s3api delete-object --bucket $BUCKET_NAME --key "$key" --version-id "$version_id"
        done
    
    - name: AWS - Remove all objects from the bucket (if needed)
      if: env.BUCKET_EXISTS == 'true'
      run: |
        # Remove objects (if there are any left)
        BUCKET_NAME=${{ github.event.inputs.bucket_name }}
        aws s3 rm s3://$BUCKET_NAME --recursive
    
    - name: AWS - Delete the S3 Bucket
      if: env.BUCKET_EXISTS == 'true'
      run: |
        BUCKET_NAME=${{ github.event.inputs.bucket_name }}
        aws s3 rb s3://$BUCKET_NAME --force
        echo "Bucket $BUCKET_NAME has been deleted."
    
    - name: AWS - Log if Bucket Does Not Exist
      if: env.BUCKET_EXISTS == 'false'
      run: echo "S3 bucket does not exist, skipping deletion."