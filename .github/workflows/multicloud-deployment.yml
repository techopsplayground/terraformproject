name: Multi-Cloud VM Creation

on:
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: 'Cloud Provider selected (AWS or Azure)'
        required: true
        type: choice
        options:
          - AWS
          - azure
      region:
        description: 'Select the region'
        required: true
        type: choice
        options:
          - us-east-1
          - us-west-1
          - az-east
          - az-west
      destroy:
        description: 'Destroy the resources'
        required: false
        type: boolean
jobs:
  terraform:
    name: Terraform Job
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6

    - name: GCP - Authentication
      if: ${{ github.event.inputs.cloud_provider == 'GCP' }}
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: GCP - Initialize Terraform
      if: ${{ github.event.inputs.cloud_provider == 'GCP' }}
      run: terraform init

    - name: GCP - Validate Terraform
      if: ${{ github.event.inputs.cloud_provider == 'GCP' }}
      run: terraform validate

    - name: GCP - Plan Terraform
      if: ${{ github.event.inputs.cloud_provider == 'GCP' }}
      run: terraform plan -var-file=terraform.tfvars -var "cloud_provider=${{ github.event.inputs.cloud_provider }}"

    - name: GCP - Apply Terraform
      if: ${{ github.event.inputs.cloud_provider == 'GCP' }}
      run: terraform apply -var-file=terraform.tfvars -var "cloud_provider=${{ github.event.inputs.cloud_provider }}" -auto-approve

    - name: AWS - Authentication
      if: ${{ github.event.inputs.cloud_provider == 'AWS' }}
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.M_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.M_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.region }}

    - name: AWS - Initialize Terraform
      if: ${{ github.event.inputs.cloud_provider == 'AWS' }}
      run: terraform init

    - name: AWS - Validate Terraform
      if: ${{ github.event.inputs.cloud_provider == 'AWS' }}
      run: terraform validate

    - name: AWS - Plan Terraform
      if: ${{ github.event.inputs.cloud_provider == 'AWS' }}
      run: terraform plan -var-file=terraform.tfvars -var "cloud_provider=${{ github.event.inputs.cloud_provider }}"

    - name: AWS - Apply Terraform
      if: ${{ github.event.inputs.cloud_provider == 'AWS' }}
      run: terraform apply -var-file=terraform.tfvars -var "cloud_provider=${{ github.event.inputs.cloud_provider }}" -auto-approve

    - name: Destroy Terraform (Optional)
      if: ${{ github.event.inputs.destroy == 'true' }}
      run: terraform destroy -var-file=terraform.tfvars -var "cloud_provider=${{ github.event.inputs.cloud_provider }}" -auto-approve
